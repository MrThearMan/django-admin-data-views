[project]
name = "django-admin-data-views"
version = "0.4.3"
description = "Add custom data views to django admin panel."
authors = [
    { name = "Matti Lamppu", email = "lamppu.matti.akseli@gmail.com" },
]
license = "MIT"
readme = "README.md"
keywords = [
    "django",
    "admin",
    "panel",
    "custom",
    "views",
    "data",
]
classifiers = [
    "Environment :: Web Environment",
    "Framework :: Django",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: Django :: 5.0",
    "Framework :: Django :: 5.1",
    "Framework :: Django :: 5.2",
    "Intended Audience :: Developers",
    "Natural Language :: English",
]
requires-python = ">=3.11,<4"
dynamic = ["dependencies"]

[project.urls]
"Homepage" = "https://mrthearman.github.io/django-admin-data-views"
"Repository" = "https://github.com/MrThearMan/django-admin-data-views"
"Bug Tracker" = "https://github.com/MrThearMan/django-admin-data-views/issues"
"Documentation" = "https://mrthearman.github.io/django-admin-data-views"

[tool.poetry]
requires-poetry = ">=2.0.0"
packages = [
    { include = "admin_data_views" },
]

[tool.poetry.dependencies]
Django = ">=5.0"
django-settings-holder = ">=0.2.0"
typing-extensions = { version = ">=4.12.1", python = "<3.11" }

[tool.poetry.group.test.dependencies]
pytest = "8.4.2"
coverage = "7.10.7"
pytest-django = "4.11.1"
nox = "2025.5.1"
beautifulsoup4 = "4.14.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "1.6.1"
pymdown-extensions = "10.16.1"
mkdocs-mermaid2-plugin = "1.2.2"

[tool.poetry.group.lint.dependencies]
pre-commit = "4.3.0"

[tool.ruff]
fix = true
unsafe-fixes = true
line-length = 120
extend-exclude = [
    "tests/*",
]
lint.typing-modules = [
    "admin_data_views.typing",
]
lint.explicit-preview-rules = true
lint.preview = true
lint.select = [
    "A",        # flake8-builtins
    "ANN",      # flake8-annotations
    "ARG",      # flake8-unused-arguments
    "B",        # flake8-bugbear
    "BLE",      # flake8-blind-except
    "C90",      # mccabe
    "C4",       # flake8-comprehensions
    "COM",      # flake8-commas
    "D200",     # pydocstyle: One-line docstring should fit on one line
    "D201",     # pydocstyle: No blank lines allowed before function docstring (found {num_lines})
    "D202",     # pydocstyle: No blank lines allowed after function docstring (found {num_lines})
    "D209",     # pydocstyle: Multi-line docstring closing quotes should be on a separate line
    "D213",     # pydocstyle: Multi-line docstring summary should start at the second line
    "DJ",       # flake8-django
    "DTZ",      # flake8-datetimez
    "E",        # pycodestyle errors
    "EM",       # flake8-errmsg
    "F",        # pyflakes
    "FA",       # flake8-future-annotations
    "FBT",      # flake8-boolean-trap
    "FLY",      # flynt
    "G",        # flake8-logging-format
    "I",        # isort
    "ICN",      # flake8-import-conventions
    "INP",      # flake8-no-pep420
    "INT",      # flake8-gettext
    "ISC",      # flake8-implicit-str-concat
    "LOG",      # flake8-logging
    "N",        # pep8-naming
    "PERF",     # perflint
    "PGH",      # pygrep-hooks
    "PIE",      # flake8-pie
    "PL",       # pylint
    "PT",       # flake8-pytest-style
    "PTH",      # flake8-use-pathlib
    "PYI",      # flake8-pyi
    "Q",        # flake8-quotes
    "R",        # Refactor
    "RET",      # flake8-return
    "RSE",      # flake8-raise
    "RUF",      # ruff-specific rules
    "S",        # flake8-bandit
    "SIM",      # flake8-simplify
    "SLF",      # flake8-self
    "T20",      # flake8-print
    "TCH",      # flake8-type-checking
    "TID",      # flake8-tidy-imports
    "TRY",      # tryceratops
    "UP",       # pyupgrade
    "W",        # pycodestyle warnings
]
# Preview rules
lint.extend-select = [
    "B909",     # loop-iterator-mutation
    "FURB110",  # if-exp-instead-of-or-operator
    "FURB142",  # for-loop-set-mutations
    "FURB145",  # slice-copy
    "FURB171",  # single-item-membership-test
    "FURB187",  # list-reverse-copy
    "PLE0307",  # invalid-str-return-type
    "PLR0916",  # too-many-boolean-expressions
    "PLR1730",  # if-stmt-min-max
    "PLR1733",  # unnecessary-dict-index-lookup
    "PLR1736",  # unnecessary-list-index-lookup
    "PLR6104",  # non-augmented-assignment
    "PLW0211",  # bad-staticmethod-argument
    "PLW0642",  # self-or-cls-assignment
    "RUF021",   # parenthesize-chained-operators
    "RUF022",   # unsorted-dunder-all
    "UP042",    # replace-str-enum
]
lint.ignore = [
    "A005",     # Allow shadowing builtin modules
    "ANN401",   # Any-typing allowed
    "ARG001",   # Unused function argument
    "ARG002",   # Unused method argument
    "ARG003",   # Unused class method argument
    "RUF012",   # No need for ClassVar
    "G004",     # Logging statement uses f-string
    #
    # Conflicting with ruff-format
    #
    "COM812",   # missing-trailing-comma
    "COM819",   # prohibited-trailing-comma
    "D206",     # indent-with-spaces
    "D300",     # triple-single-quotes
    "E111",     # indentation-with-invalid-multiple
    "E114",     # indentation-with-invalid-multiple-comment
    "E117",     # over-indented
    "ISC001",   # single-line-implicit-string-concatenation
    "ISC002",   # multi-line-implicit-string-concatenation
    "Q000",     # bad-quotes-inline-string
    "Q001",     # bad-quotes-multiline-string
    "Q002",     # bad-quotes-docstring
    "Q003",     # avoidable-escaped-quote
    "W191",     # tab-indentation
]

[tool.ruff.lint.extend-per-file-ignores]
"**/*/test_*.py" = [
    "ANN",      # No need to annotate tests
    "E721",     # No need to compare to True
    "N801",     # Allow whatever class names in tests
    "N802",     # Allow whatever function names in tests
    "N815",     # Allow whatever variable names in tests
    "PLR0915",  # Can have as many statements as needed
    "PLR2004",  # Magic value comparisons are allowed in tests
    "S101",     # Assert is fine
    "S105",     # Hardcoded passwords are fine in tests
    "S106",     # Hardcoded passwords are fine in tests
    "S108",     # No need to care about insecure temp file usages in tests
    "S311",     # Pseudo-random generators are fine here
    "SLF",      # Allow accessing private members in tests
    "UP",       # No upgrade rules
    "PLR0914",  # Too many local variables
]

[tool.coverage.run]
relative_files = true

[tool.coverage.report]
omit = [
    "tests/*",
    "docs/*",
    ".venv/*",
    ".tox/*",
]
exclude_lines = [
    "if TYPE_CHECKING:",
    "except ImportError:",
    "pragma: no cover",
    "pass",
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "example_project.project.settings"
addopts = "--disable-warnings"

[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"
